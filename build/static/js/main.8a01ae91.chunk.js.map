{"version":3,"sources":["quizDashBoard.js","Quiz.js","MainPage.js","createQuiz.js","Result.js","Navbar.js","Scores.js","utils/helper.js","MultipleAnswer.js","Mode.js","CreateUser.js","QuizResults.js","Login.js","User.js","App.js","serviceWorker.js","index.js"],"names":["QuizDashBoard","props","fetchQuiz","axios","get","then","res","setState","quizzes","data","loading","submitQuery","state","query","response","searchBarOnChange","e","preventDefault","target","value","className","TextField","variant","id","label","name","onChange","data-cy","Button","color","size","onClick","this","length","style","alignContent","Typography","textAlign","map","quiz","Card","key","_id","CardContent","gutterBottom","createdBy","CardActions","to","React","Component","Quiz","answerQuestion","console","log","questions","index","post","match","params","answer","feedBack","answerFeedBack","push","redirect","showResult","handleChange","score","pathname","align","text","display","placeholder","width","type","Modal","open","onClose","height","outline","backgroundColor","Object","keys","MainPage","createQuiz","useState","setQuestions","setName","setRedirect","quizId","setQuizId","questionsError","setQuestionsError","onNameChange","question","questionsCopy","splice","questionChanged","marginLeft","fullWidth","answersCopy","alternatives","answerChanged","individualQuestion","forEach","deleteQuestion","idx","addAlternative","title","Icon","margin","whiteSpace","alt","indexAlt","indexQuestion","alternativeOnChange","questionsArray","isValidated","validate","localStorage","getItem","headers","authToken","Result","location","Navbar","AppBar","position","Toolbar","src","fontSize","href","right","bottom","top","AccountCircle","Scores","scores","setScores","setLoading","useEffect","formatDate","date","day","getDate","monthIndex","getMonth","year","getFullYear","playedBy","Date","rightAmount","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","generateWord","a","request","randomItem","word","generateWordsAPI","rightAnswer","translatedAnswer","realAnswer","alternative1","alternative2","translatedAlt1","translatedAlt2","countRightAnswers","resArray","rightAnswers","MultipleAnswer","status","startQuestion","currentQuestion","choices","handeClick","choice","answers","userAnswer","answerRes","window","reload","justifyContent","List","ListItem","button","ListItemText","Mode","textDecoration","CreateUser","email","setEmail","password","setPassword","history","replace","login","alert","setItem","flexDirection","QuizResults","alignItems","gotAnswerFeedBack","goBack","Login","setKey","User","user","setUser","token","selectedTab","setSelectedTab","err","marginRight","marginTop","Tabs","newValue","scrollButtons","Tab","createdQuizzes","borderRadius","marginBottom","playedQuizzes","App","exact","path","component","Boolean","hostname","ReactDOM","hydrate","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a01ae91.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nexport default class QuizDashBoard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      quizzes: [],\r\n      query: \"\"\r\n    };\r\n    this.fetchQuiz();\r\n  }\r\n\r\n  fetchQuiz = () => {\r\n    axios.get(`https://grim-dungeon-58618.herokuapp.com`).then(res => {\r\n      this.setState({ quizzes: res.data, loading: false });\r\n    });\r\n  };\r\n\r\n  submitQuery = () => {\r\n    axios\r\n      .get(`https://grim-dungeon-58618.herokuapp.com?name=${this.state.query}`)\r\n      .then(response =>\r\n        this.setState({ quizzes: response.data, loading: !this.state.loading })\r\n      );\r\n  };\r\n\r\n  searchBarOnChange = e => {\r\n    e.preventDefault();\r\n    this.setState({ query: e.target.value });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"search-container\">\r\n          <TextField\r\n            variant=\"outlined\"\r\n            id=\"outlined-basic\"\r\n            label=\"Search for quizzes\"\r\n            name=\"searchbar\"\r\n            onChange={e => this.searchBarOnChange(e)}\r\n            data-cy=\"search-field\"\r\n          />\r\n          <Button\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            onClick={() => this.submitQuery()}\r\n            data-cy=\"search-button\"\r\n          >\r\n            <SearchIcon />\r\n          </Button>\r\n          <br></br>\r\n          {this.state.quizzes.length === 0 && this.state.query ? (\r\n            <div style={{ alignContent: \"center\" }}>\r\n              <Typography>No quizzes were found</Typography>{\" \"}\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n\r\n        <div className=\"quizzes\">\r\n          <div style={{ textAlign: \"center\" }} className=\"quiz-container\">\r\n            {this.state.quizzes.map(quiz => {\r\n              return (\r\n                <Card className=\"quiz-card\" data-cy=\"quiz-card\" key={quiz._id}>\r\n                  <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\">\r\n                      {quiz.name}\r\n                    </Typography>\r\n                    <Typography variant=\"h6\">{quiz.createdBy}</Typography>\r\n                  </CardContent>\r\n                  <CardActions>\r\n                    <Link\r\n                      className=\"play-button\"\r\n                      to={`/quizDashBoard/mode/${quiz._id}`}\r\n                    >\r\n                      <Button\r\n                        data-cy=\"play-button\"\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                      >\r\n                        Play\r\n                      </Button>\r\n                    </Link>\r\n                  </CardActions>\r\n                </Card>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Button, Modal } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nexport default class Quiz extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      quiz: {},\r\n      answer: \"\",\r\n      answerFeedBack: [],\r\n      redirect: false,\r\n      index: 0,\r\n      showResult: false,\r\n      score: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(\r\n        `https://grim-dungeon-58618.herokuapp.com/quiz/${this.props.match.params.id}`\r\n      )\r\n      .then((response) => {\r\n        this.setState({ loading: false, quiz: response.data });\r\n      });\r\n  }\r\n\r\n  answerQuestion = (e) => {\r\n    e.preventDefault();\r\n    console.log(this.state.quiz.questions[this.state.index]);\r\n    axios\r\n      .post(\r\n        `https://grim-dungeon-58618.herokuapp.com/quiz/answer/${this.props.match.params.id}/question`,\r\n        {\r\n          _id: this.state.quiz.questions[this.state.index]._id,\r\n          answer: this.state.answer,\r\n        }\r\n      )\r\n      .then((response) => {\r\n        const feedBack = [...this.state.answerFeedBack];\r\n        const data = response.data;\r\n        console.log(data);\r\n        feedBack.push(data);\r\n        if (this.state.index + 1 === this.state.quiz.questions.length) {\r\n          this.setState({\r\n            redirect: true,\r\n            answerFeedBack: feedBack,\r\n            index: this.state.index + 1,\r\n          });\r\n        }\r\n        this.setState({\r\n          answerFeedBack: feedBack,\r\n          showResult: true,\r\n        });\r\n      });\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ answer: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    let { quiz, redirect } = this.state;\r\n\r\n    if (redirect === true) {\r\n      return (\r\n        <Redirect\r\n          \r\n          to={{\r\n            pathname: \"createQuiz/result\",\r\n            state: { answerFeedBack: this.state.answerFeedBack, quiz },\r\n          }}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"questions\">\r\n        <div>\r\n          {this.state.loading ? (\r\n            <p>loading...</p>\r\n          ) : (\r\n            <div>\r\n              <Typography align=\"center\" variant=\"h1\" color=\"textSecondary\">\r\n                {quiz.name}\r\n              </Typography>\r\n              <Typography variant=\"h4\">\r\n                {quiz.questions[this.state.index].text}\r\n              </Typography>\r\n              <div>\r\n                <form style={{ display: \"flex\" }}>\r\n                  <TextField\r\n                    onChange={(e) => this.handleChange(e)}\r\n                    placeholder=\"Enter your answer\"\r\n                    value={this.state.answer}\r\n                    style={{ width: \"70%\" }}\r\n                    type=\"text\"\r\n                  />\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={(e) => this.answerQuestion(e)}\r\n                    type=\"submit\"\r\n                  >\r\n                    Submit your answer\r\n                  </Button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {this.state.showResult === false ? null : (\r\n            <div>\r\n              {this.state.answerFeedBack[this.state.index][\r\n                this.state.quiz.questions[this.state.index].text\r\n              ] === true ? (\r\n                <Modal\r\n                  open={this.state.showResult}\r\n                  onClose={() => {\r\n                    this.setState({\r\n                      index: this.state.index + 1,\r\n                      showResult: false,\r\n                      answer: \"\",\r\n                    });\r\n                  }}\r\n                  style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    color: \"green\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      outline: \"none\",\r\n                      textAlign: \"center\",\r\n                      backgroundColor: \"white\",\r\n                      width: \"100%\",\r\n                      height: \"100%\",\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"h4\">\r\n                      Your answer was correct\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" color=\"textPrimary\">\r\n                      {Object.keys(this.state.answerFeedBack[this.state.index])}\r\n                    </Typography>\r\n                    <Typography variant=\"h6\">√ {this.state.answer}</Typography>\r\n                    <form>\r\n                      <Button\r\n                        type=\"submit\"\r\n                        onClick={() =>\r\n                          this.setState({\r\n                            showResult: false,\r\n                            answer: \"\",\r\n                            index: this.state.index + 1,\r\n                          })\r\n                        }\r\n                      >\r\n                        Proceed to next question\r\n                      </Button>\r\n                    </form>\r\n                  </div>\r\n                </Modal>\r\n              ) : (\r\n                <Modal\r\n                  open={this.state.showResult}\r\n                  onClose={() => {\r\n                    this.setState({\r\n                      index: this.state.index + 1,\r\n                      showResult: false,\r\n                      answer: \"\",\r\n                    });\r\n                  }}\r\n                  style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                >\r\n                  <div\r\n                    style={{\r\n                      outline: \"none\",\r\n                      textAlign: \"center\",\r\n                      backgroundColor: \"white\",\r\n                      width: \"100%\",\r\n                      height: \"100%\",\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"h4\" color=\"error\">\r\n                      Your answer was incorrect\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" color=\"error\">\r\n                      {Object.keys(this.state.answerFeedBack[this.state.index])}\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" color=\"error\">\r\n                      x {this.state.answer}\r\n                    </Typography>\r\n                    <Button\r\n                      onClick={() =>\r\n                        this.setState({\r\n                          showResult: false,\r\n                          answer: \"\",\r\n                          index: this.state.index + 1,\r\n                        })\r\n                      }\r\n                    >\r\n                      Proceed to next question\r\n                    </Button>\r\n                  </div>\r\n                </Modal>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport default function MainPage() {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Redirect to={\"/quizDashBoard\"} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/* eslint-disable react-hooks/rules-of-hooks */\r\nimport React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\n\r\nimport { Redirect } from \"react-router\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst createQuiz = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [name, setName] = useState(\"\");\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [quizId, setQuizId] = useState(\"\");\r\n  const [questionsError, setQuestionsError] = useState(\"\");\r\n\r\n  const validate = questionsArray => {\r\n    let isValidated = false;\r\n    questionsArray.map(question => {\r\n      if (question.text.length > 0 && question.answer.length > 0) {\r\n        isValidated = true;\r\n      } else {\r\n        isValidated = false;\r\n      }\r\n    });\r\n\r\n    return isValidated;\r\n  };\r\n\r\n  const addQuestion = () => {\r\n    setQuestions([...questions, { text: \"\", answer: \"\" }]);\r\n    console.log(questions);\r\n  };\r\n\r\n  const questionChanged = (e, index) => {\r\n    let questionsCopy = [...questions];\r\n    questionsCopy.splice(index, 1, {\r\n      text: e.target.value,\r\n      answer: questions[index].answer\r\n    });\r\n    setQuestions(questionsCopy);\r\n  };\r\n\r\n  const answerChanged = (e, index) => {\r\n    let answersCopy = [...questions];\r\n    answersCopy.splice(index, 1, {\r\n      text: questions[index].text,\r\n      answer: e.target.value,\r\n      alternatives: questions[index].alternatives\r\n    });\r\n    setQuestions(answersCopy);\r\n  };\r\n\r\n  const sendQuiz = questionsArray => {\r\n    const isValid = validate(questionsArray);\r\n    if (isValid) {\r\n      axios\r\n        .post(\"https://grim-dungeon-58618.herokuapp.com/createQuiz\", {\r\n          name,\r\n          questions,\r\n          id: localStorage.getItem(\"id\")\r\n        }, {headers: {authToken: localStorage.getItem('token')}})\r\n        .then(res => {\r\n          setQuizId(res.data.quiz._id);\r\n          setRedirect(true);\r\n        });\r\n    } else {\r\n      setQuestionsError(\"Question and answer cannot be blank\");\r\n    }\r\n  };\r\n\r\n  const addAlternative = idx => {\r\n    const questionsCopy = [...questions];\r\n    questionsCopy[idx].alternatives = [{ text: \"\" }, { text: \"\" }];\r\n    setQuestions(questionsCopy);\r\n  };\r\n\r\n  const alternativeOnChange = (e, indexAlt, indexQuestion) => {\r\n    const questionsCopy = [...questions];\r\n    questionsCopy[indexQuestion].alternatives[indexAlt] = {\r\n      text: e.target.value\r\n    };\r\n    setQuestions(questionsCopy);\r\n  };\r\n\r\n  const deleteQuestion = individualQuestion => {\r\n    let questionsCopy = [...questions];\r\n    questions.forEach((question, index) => {\r\n      if (question === individualQuestion) {\r\n        questionsCopy.splice(index, 1);\r\n      }\r\n    });\r\n\r\n    setQuestions(questionsCopy);\r\n    setQuestionsError(\"\");\r\n  };\r\n\r\n  const onNameChange = e => {\r\n    setName(e.target.value);\r\n  };\r\n  return (\r\n    <div className=\"Create-quiz\">\r\n      {redirect === true ? (\r\n        <Redirect\r\n          to={{ pathname: \"createQuiz/result\", state: { id: quizId } }}\r\n        />\r\n      ) : (\r\n        <div />\r\n      )}\r\n\r\n      <TextField\r\n        label=\"Name of your quiz\"\r\n        variant=\"outlined\"\r\n        id=\"outlined-basic\"\r\n        name=\"name\"\r\n        data-cy=\"name-form\"\r\n        onChange={e => onNameChange(e)}\r\n      />\r\n      <br />\r\n      {questions.map((question, index) => {\r\n        return (\r\n          <div key={index} className=\"create-quiz-form elevation\" >\r\n            <div style={{width: \"80%\"}}>\r\n            <TextField\r\n              onChange={e => questionChanged(e, index)}\r\n              label=\"Type your question\"\r\n              name=\"text\"\r\n              data-cy=\"question\"\r\n              style={{marginLeft: \"30px\"}}\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              onChange={e => answerChanged(e, index)}\r\n              label=\"Type your answer\"\r\n              name=\"answer\"\r\n              data-cy=\"answer\"\r\n              style={{marginLeft: \"30px\"}}\r\n              fullWidth\r\n            />\r\n            </div>\r\n            \r\n            <Button onClick={() => deleteQuestion(question)}>\r\n              <DeleteIcon />\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={() => addAlternative(index)}\r\n              size=\"medium\"\r\n              variant=\"text\"\r\n              title=\"Add alternatives to this question\"\r\n              data-cy=\"add-alt\"\r\n            >\r\n              <Icon color=\"primary\">add_circle</Icon>\r\n            </Button>\r\n\r\n            {questionsError ? (\r\n              <div style={{ color: \"red\", margin: \"0\" }}>\r\n                <p>{questionsError}</p>\r\n              </div>\r\n            ) : null}\r\n            <br />\r\n            <div style={{ whiteSpace: \"pre\" }}>\r\n              {question.alternatives\r\n                ? question.alternatives.map((alt, idx) => {\r\n                    return (\r\n                      <div>\r\n                        <TextField\r\n                          onChange={e => alternativeOnChange(e, idx, index)}\r\n                          placeholder=\"Add an alternative\"\r\n                        />\r\n                      </div>\r\n                    );\r\n                  })\r\n                : null}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n      <Button\r\n        onClick={addQuestion}\r\n        size=\"medium\"\r\n        variant=\"text\"\r\n        title=\"Add a new question\"\r\n        data-cy=\"add-question\"\r\n      >\r\n        <Icon color=\"primary\">add_circle</Icon>\r\n      </Button>\r\n      <br />\r\n      <Button\r\n        data-cy=\"create-quiz\"\r\n        color=\"primary\"\r\n        onClick={() => sendQuiz(questions)}\r\n      >\r\n        Create your quiz\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default createQuiz;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Result extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Quiz was successfully created!</h1>\r\n        <h2>To play your quiz, use this link </h2>\r\n        <Link\r\n          to={{ pathname: `../quizDashBoard/${this.props.location.state.id}` }}\r\n        >{`https://quizitgame.netlify.com/quizDashBoard/mode/${this.props.location.state.id}`}</Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport {\r\n  SupervisedUserCircleOutlined,\r\n  AccountCircle,\r\n} from \"@material-ui/icons\";\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\" style={{position: 'relative'}}>\r\n          <Link to=\"/\">\r\n            <div>\r\n              <img alt=\"QuizIt logo\" height=\"50\" width=\"50\" src=\"../Logo.png\" />\r\n            </div>\r\n          </Link>\r\n          <Typography style={{ fontSize: \"1.5vw\" }}>\r\n            <Link className=\"navbar-links\" to=\"/createQuiz\">\r\n              Create your own quiz\r\n            </Link>\r\n          </Typography>\r\n          <Typography style={{ fontSize: \"1.5vw\" }}>\r\n            <Link className=\"navbar-links\" to=\"/quizDashBoard\">\r\n              Play existing quizzes\r\n            </Link>\r\n          </Typography>\r\n          <Typography style={{ fontSize: \"1.5vw\" }}>\r\n            <Link className=\"navbar-links\" to=\"/createUser\">\r\n              Create your account\r\n            </Link>\r\n          </Typography>\r\n          \r\n          <Typography style={{ fontSize: \"1.5vw\" }}>\r\n            <a\r\n              className=\"navbar-links\"\r\n              href=\"https://github.com/AlexJ2005/QuizIt\"\r\n            >\r\n              GitHub\r\n            </a>\r\n          </Typography>\r\n          <Link className=\"navbar-links\" to=\"/user\" style={{position: \"absolute\", right: '0px', bottom: \"0px\", top: \"0px\"}}>\r\n            <AccountCircle />\r\n          </Link>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Card from \"@material-ui/core/Card\";\r\n\r\nexport default function Scores(props) {\r\n  const [scores, setScores] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `https://grim-dungeon-58618.herokuapp.com/quiz/${props.match.params.id}`\r\n      )\r\n      .then(res => {\r\n        setScores(res.data);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const formatDate = date => {\r\n    let monthNames = [\r\n      \"Januari\",\r\n      \"Februari\",\r\n      \"Mars\",\r\n      \"April\",\r\n      \"Maj\",\r\n      \"Juni\",\r\n      \"Juli\",\r\n      \"Augusti\",\r\n      \"September\",\r\n      \"Oktober\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n\r\n    let day = date.getDate();\r\n    let monthIndex = date.getMonth();\r\n    let year = date.getFullYear();\r\n\r\n    return day + \" \" + monthNames[monthIndex] + \" \" + year;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {loading === false\r\n        ? scores.playedBy.map(score => {\r\n            console.log(formatDate(new Date(score.date)));\r\n            return (\r\n              <div key={score._id}>\r\n                <Card style={{ textAlign: \"center\" }}>\r\n                  <Typography>\r\n                    {score.name} fick {score.rightAmount} rätta svar den{\" \"}\r\n                    {formatDate(new Date(score.date))}\r\n                  </Typography>\r\n                </Card>\r\n              </div>\r\n            );\r\n          })\r\n        : null}\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport const words = [\r\n  \"frankrike\",\r\n  \"brasilien\",\r\n  \"spanien\",\r\n  \"brad pitt\",\r\n  \"portugal\",\r\n  \"donald trump\"\r\n];\r\nexport const shuffle = array => {\r\n  var currentIndex = array.length,\r\n    temporaryValue,\r\n    randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\nconst generateWord = async name => {\r\n  let request = await axios.get(\r\n    `https://api.datamuse.com/words?ml=${name}&max=10`\r\n  );\r\n  let data = request.data;\r\n\r\n  let randomItem = data[Math.floor(Math.random() * request.data.length)];\r\n  return randomItem.word;\r\n};\r\n\r\nexport const generateWordsAPI = async rightAnswer => {\r\n  const translatedAnswer = await axios.get(\r\n    `https://translate.yandex.net/api/v1.5/tr.json/translate?key=trnsl.1.1.20191125T152203Z.b4490ae6b0dce9c7.8bff6aff5cd24374a261071ab769f7e12c0928b3&lang=en&text=${rightAnswer}`\r\n  );\r\n  let realAnswer = translatedAnswer.data.text;\r\n\r\n  let alternative1 = await generateWord(realAnswer);\r\n  let alternative2 = await generateWord(realAnswer);\r\n\r\n  let translatedAlt1 = await axios.get(\r\n    `https://translate.yandex.net/api/v1.5/tr.json/translate?key=trnsl.1.1.20191125T152203Z.b4490ae6b0dce9c7.8bff6aff5cd24374a261071ab769f7e12c0928b3&lang=sv&text=${alternative1}`\r\n  );\r\n  let translatedAlt2 = await axios.get(\r\n    `https://translate.yandex.net/api/v1.5/tr.json/translate?key=trnsl.1.1.20191125T152203Z.b4490ae6b0dce9c7.8bff6aff5cd24374a261071ab769f7e12c0928b3&lang=sv&text=${alternative2}`\r\n  );\r\n\r\n  if (translatedAlt1.data.text[0] === rightAnswer) {\r\n    console.log(\"Alt 1 is duplicate\");\r\n    alternative1 = await generateWord(realAnswer);\r\n    translatedAlt1 = await axios.get(\r\n      `https://translate.yandex.net/api/v1.5/tr.json/translate?key=trnsl.1.1.20191125T152203Z.b4490ae6b0dce9c7.8bff6aff5cd24374a261071ab769f7e12c0928b3&lang=sv&text=${alternative1}`\r\n    );\r\n  } else if (translatedAlt2.data.text[0] === rightAnswer) {\r\n    console.log(\"Alternative 2 is a duplicate\");\r\n    alternative2 = await generateWord(realAnswer);\r\n    translatedAlt2 = await axios.get(\r\n      `https://translate.yandex.net/api/v1.5/tr.json/translate?key=trnsl.1.1.20191125T152203Z.b4490ae6b0dce9c7.8bff6aff5cd24374a261071ab769f7e12c0928b3&lang=sv&text=${alternative2}`\r\n    );\r\n  } else if (translatedAlt1.data.text[0] === translatedAlt2.data.text[0]) {\r\n    console.log(\"Alt 2 is a duplicate\");\r\n    alternative2 = await generateWord(realAnswer);\r\n    translatedAlt2 = await axios.get(\r\n      `https://translate.yandex.net/api/v1.5/tr.json/translate?key=trnsl.1.1.20191125T152203Z.b4490ae6b0dce9c7.8bff6aff5cd24374a261071ab769f7e12c0928b3&lang=sv&text=${alternative2}`\r\n    );\r\n  }\r\n\r\n  const alternatives = [\r\n    translatedAlt1.data.text[0],\r\n    translatedAlt2.data.text[0],\r\n    rightAnswer\r\n  ];\r\n  return shuffle(alternatives);\r\n};\r\n\r\nexport const countRightAnswers = resArray => {\r\n  console.log(resArray)\r\n  let rightAnswers = 0;\r\n  resArray.forEach(res => {\r\n    const key = Object.keys(res);\r\n    if (res[key] === true) {\r\n      rightAnswers++;\r\n    }\r\n  });\r\n  return rightAnswers;\r\n};\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { generateWordsAPI, shuffle, countRightAnswers } from \"./utils/helper\";\r\nimport QuizDashBoard from \"./quizDashBoard\";\r\nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\r\n\r\nexport default class MultipleAnswer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      quiz: {},\r\n      question: {},\r\n      choices: [],\r\n      status: \"loading\",\r\n      currentQuestion: { idx: 0 },\r\n      answers: [],\r\n      answerRes: [],\r\n      rightAmount: 0,\r\n    };\r\n    this.fetchQuiz();\r\n  }\r\n\r\n  fetchQuiz = () => {\r\n    axios\r\n      .get(\r\n        `https://grim-dungeon-58618.herokuapp.com/quiz/${this.props.match.params.id}`\r\n      )\r\n      .then((res) => {\r\n        this.setState({ quiz: res.data, status: \"loaded\" });\r\n        this.startQuestion();\r\n      });\r\n  };\r\n\r\n  startQuestion = async () => {\r\n    //set set a random question\r\n    let { quiz, currentQuestion } = this.state;\r\n    const { idx } = currentQuestion;\r\n    if (idx === quiz.questions.length) {\r\n      return this.setState({ status: \"completed\" });\r\n    }\r\n    const { answer, text } = quiz.questions[idx];\r\n\r\n    let choices;\r\n    if (\r\n      !quiz.questions[idx].alternatives ||\r\n      quiz.questions[idx].alternatives.length === 0\r\n    ) {\r\n      choices = generateWordsAPI(answer);\r\n    } else if (quiz.questions[idx].alternatives.length === 2) {\r\n      choices = shuffle([\r\n        answer,\r\n        quiz.questions[idx].alternatives[0].text,\r\n        quiz.questions[idx].alternatives[1].text,\r\n      ]);\r\n    }\r\n\r\n    this.setState({\r\n      choices,\r\n      currentQuestion: { idx: idx + 1, answer, text },\r\n    });\r\n  };\r\n\r\n  handeClick = (choice) => {\r\n    let answersCopy = [...this.state.answers];\r\n    answersCopy.push({ userAnswer: choice });\r\n    this.setState({ answers: answersCopy });\r\n    if (choice === this.state.currentQuestion.answer) {\r\n      this.setState({ rightAmount: this.state.rightAmount + 1 });\r\n    }\r\n    this.startQuestion();\r\n  };\r\n\r\n  render() {\r\n    const { currentQuestion, status, choices } = this.state;\r\n    if (status === \"loading\") {\r\n      return <div>...loading</div>;\r\n    }\r\n    if (status === \"completed\") {\r\n      if (localStorage.getItem(\"token\")) {\r\n        axios\r\n          .post(\r\n            `https://grim-dungeon-58618.herokuapp.com/quiz/answer/saveResult`,\r\n            {\r\n              _id: this.state.quiz._id,\r\n              rightAmount: this.state.rightAmount,\r\n            },\r\n            { headers: { authToken: localStorage.getItem(\"token\") } }\r\n          )\r\n          .then((res) => {\r\n            this.setState({\r\n              status: \"finished\",\r\n            });\r\n          });\r\n      } else if (!localStorage.getItem(\"token\")) {\r\n        axios\r\n          .post(\r\n            \"https://grim-dungeon-58618.herokuapp.com/quiz/answer/saveResult/guest\",\r\n            {\r\n              rightAmount: this.state.rightAmount,\r\n            }\r\n          )\r\n          .then((res) => {\r\n            this.setState({ status: \"finished\" });\r\n          });\r\n      }\r\n    }\r\n    if (status === \"finished\") {\r\n      return (\r\n        <div>\r\n          <Typography variant=\"h4\">\r\n            Du hade {this.state.rightAmount} rätt\r\n          </Typography>\r\n          <Button onClick={() => window.location.reload()}>Spela igen</Button>\r\n          <QuizDashBoard />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <List>\r\n          <Typography>{currentQuestion.text}</Typography>\r\n          {choices.length > 2\r\n            ? choices.map((choice) => {\r\n                return (\r\n                  <ListItem\r\n                    button\r\n                    key={choice}\r\n                    onClick={() => this.handeClick(choice)}\r\n                    color=\"primary\"\r\n                    data-cy=\"choice-button\"\r\n                  >\r\n                    <ListItemText>{choice}</ListItemText>\r\n                  </ListItem>\r\n                );\r\n              })\r\n            : null}\r\n        </List>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Card, Button, Typography } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nexport default function Mode(props) {\r\n  return (\r\n    <div className=\"gameMode\">\r\n      <Card className=\"gameMode-items\">\r\n        <Link\r\n          style={{ textDecoration: \"none\" }}\r\n          to={`/quizDashBoard/write/${props.match.params.id}`}\r\n        >\r\n          <Button>Write</Button>\r\n        </Link>\r\n        <Typography variant=\"body1\">\r\n          Write is the most simplest form of playing on QuizIt, all quizzes are\r\n          guaranteed compatible with the write mode.\r\n        </Typography>\r\n      </Card>\r\n      <Card className=\"gameMode-items\">\r\n        <Link\r\n          style={{ textDecoration: \"none\" }}\r\n          to={`/quizDashBoard/multipleAnswer/${props.match.params.id}`}\r\n        >\r\n          <Button>Multiple choices</Button>\r\n        </Link>\r\n        <Typography variant=\"body1\">\r\n          Multiple choices lets you choose between different alternatives for\r\n          the answer, note that all quizzes aren't compatible with this feature.\r\n        </Typography>\r\n      </Card>\r\n      <Card className=\"gameMode-items\">\r\n        <Link\r\n          style={{ textDecoration: \"none\" }}\r\n          to={`/quizDashBoard/scores/${props.match.params.id}`}\r\n        >\r\n          <Button>View Scores</Button>\r\n          \r\n        </Link>\r\n        <Typography variant=\"body1\">This page lets you watch everybodys score on this quiz.</Typography>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Button, FormGroup, InputLabel, Typography } from \"@material-ui/core\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nexport default function CreateUser(props) {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (window.localStorage.getItem(\"token\")) {\r\n      props.history.replace(\"/user\");\r\n    }\r\n  }, []);\r\n\r\n  const createAccount = () => {\r\n    axios\r\n      .post(\"https://grim-dungeon-58618.herokuapp.com/createUser\", {\r\n        email,\r\n        name,\r\n        password,\r\n      })\r\n      .then((res) => {\r\n        if (res.status !== 403) {\r\n          login();\r\n        } else {\r\n          alert(res.data);\r\n        }\r\n      });\r\n  };\r\n\r\n  const login = () => {\r\n    axios\r\n      .post(\"https://grim-dungeon-58618.herokuapp.com/login\", {\r\n        email,\r\n        password,\r\n      })\r\n      .then((res) => {\r\n        if (res.status === 400) {\r\n          alert(res.data);\r\n        } else if (res.status === 200) {\r\n          localStorage.setItem(\"token\", res.data);\r\n          props.history.replace(\"/user\");\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {window.localStorage.getItem(\"token\") ? (\r\n        <div>\r\n          <Redirect to=\"/user\" />\r\n        </div>\r\n      ) : (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <div>\r\n            <Typography variant=\"h5\">Login to exisiting account</Typography>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                flexDirection: \"column\",\r\n              }}\r\n            >\r\n              <TextField\r\n                label=\"Enter your email\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n              <TextField\r\n                label=\"Enter your password\"\r\n                variant=\"outlined\"\r\n                type=\"password\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n              <Button color=\"primary\" variant=\"contained\">\r\n                Login\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <Typography variant=\"h5\">Create a new account</Typography>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                flexDirection: \"column\",\r\n              }}\r\n            >\r\n              <TextField\r\n                label=\"Choose email\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n              <TextField\r\n                label=\"Enter your name\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n              <TextField\r\n                label=\"Choose password\"\r\n                variant=\"outlined\"\r\n                type=\"password\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={() => createAccount()}\r\n              >\r\n                Register\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { countRightAnswers } from \"./utils/helper\";\r\n\r\nexport default function QuizResults(props) {\r\n  useEffect(() => {\r\n    console.log(props.location);\r\n    if (window.localStorage.getItem(\"token\")) {\r\n      axios.post(\"https://grim-dungeon-58618.herokuapp.com/quiz/answer/saveResult\", {\r\n        _id: props.location.state.quiz._id,\r\n        rightAmount: countRightAnswers(props.location.state.answerFeedBack),\r\n        \r\n      }, {headers: {authToken: localStorage.getItem('token')}});\r\n    } else {\r\n      axios.post(\r\n        \"https://grim-dungeon-58618.herokuapp.com/quiz/answer/saveResult/guest\",\r\n        {\r\n          _id: props.location.state.quiz._id,\r\n          rightAmount: countRightAnswers(props.location.state.answerFeedBack),\r\n        }\r\n      );\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div style={{ alignItems: \"center\" }}>\r\n      {props.location.state.gotAnswerFeedBack === false ? null : (\r\n        <div>\r\n          {\" \"}\r\n          {props.location.state.answerFeedBack.map((feedBack, index) => {\r\n            const key = Object.keys(feedBack);\r\n            const wrongAnswerStyle = {\r\n              color: \"red\",\r\n            };\r\n            const rightAnswerStyle = {\r\n              color: \"green\",\r\n            };\r\n            return (\r\n              <div key={index} style={{ textAlign: \"center\" }}>\r\n                {feedBack[key] === false ? (\r\n                  <Card>\r\n                    {\" \"}\r\n                    <Typography style={wrongAnswerStyle}>\r\n                      {\" \"}\r\n                      x {props.location.state.quiz.questions[index].text}{\" \"}\r\n                    </Typography>{\" \"}\r\n                    {props.location.state.quiz.questions[index].answer}\r\n                  </Card>\r\n                ) : (\r\n                  <Card>\r\n                    {\" \"}\r\n                    <Typography style={rightAnswerStyle}>\r\n                      {\" \"}\r\n                      √ {props.location.state.quiz.questions[index].text}{\" \"}\r\n                    </Typography>{\" \"}\r\n                    {props.location.state.quiz.questions[index].answer}\r\n                  </Card>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      <Button\r\n        style={{ alignItems: \"center\" }}\r\n        onClick={() => props.history.goBack()}\r\n      >\r\n        Play again\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Typography, TextField, Button } from \"@material-ui/core\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport default function Login() {\r\n  const [key, setKey] = useState(\"\");\r\n  const [redirect, setRedirect] = useState(false);\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <Typography variant=\"h2\">Instructions for logging in</Typography>\r\n      <ol>\r\n        <li>\r\n          <Typography variant=\"h6\">\r\n            Open Quizit on a device where you're logged in\r\n          </Typography>\r\n        </li>\r\n        <li>\r\n          <Typography variant=\"h6\">\r\n            Navigate to the user page (user tab on the navigation bar)\r\n          </Typography>\r\n        </li>\r\n        <li>\r\n          <Typography variant=\"h6\">Get your secret key</Typography>\r\n        </li>\r\n        <li>\r\n          <Typography variant=\"h6\">\r\n            Enter the key onto the from and click enter\r\n          </Typography>\r\n        </li>\r\n        <li>\r\n          <Typography variant=\"h6\">\r\n            Everything went well you should be able to see your name on the user\r\n            tab\r\n          </Typography>\r\n        </li>\r\n      </ol>\r\n      <TextField\r\n        variant=\"outlined\"\r\n        id=\"outlined-basic\"\r\n        placeholder=\"Enter your key\"\r\n        fullWidth\r\n        onChange={e => {\r\n          setKey(e.target.value);\r\n          console.log(e.target.width + \"ch\");\r\n        }}\r\n      />\r\n      <Button\r\n        color=\"primary\"\r\n        onClick={e => {\r\n          window.localStorage.setItem(\"id\", key);\r\n          setRedirect(true);\r\n        }}\r\n      >\r\n        Enter\r\n      </Button>\r\n\r\n      {redirect === true ? (\r\n        <Redirect to={{ pathname: \"/createUser\" }}></Redirect>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  Box,\r\n  Button,\r\n  ListItem,\r\n  List,\r\n} from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function User(props) {\r\n  const [user, setUser] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const token = localStorage.getItem(\"token\");\r\n  const [selectedTab, setSelectedTab] = useState(\"one\");\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      axios\r\n        .get(`https://grim-dungeon-58618.herokuapp.com/user`, {\r\n          headers: { authToken: token },\r\n        })\r\n        .then((res) => {\r\n          if (res.status === 200) {\r\n            setUser(res.data);\r\n            setLoading(false);\r\n          } else {\r\n            return <Typography>{res.data.err}</Typography>;\r\n          }\r\n        });\r\n    } else {\r\n      props.history.replace(\"/createUser\");\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {loading === true ? (\r\n        <Typography>...loading user</Typography>\r\n      ) : (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              backgroundColor: \"white\",\r\n            }}\r\n          >\r\n            <Typography variant=\"h4\" style={{ marginRight: \"3rem\" }}>\r\n              {user.name}\r\n            </Typography>\r\n            <Typography\r\n              variant=\"h6\"\r\n              style={{ color: \"grey\", marginTop: \"0.5rem\" }}\r\n            >\r\n              {user.email}\r\n            </Typography>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              backgroundColor: \"white\",\r\n            }}\r\n          >\r\n            <Tabs\r\n              value={selectedTab}\r\n              onChange={(e, newValue) => setSelectedTab(newValue)}\r\n              variant=\"scrollable\"\r\n              scrollButtons=\"off\"\r\n            >\r\n              <Tab value=\"one\" label=\"Created\" />\r\n              <Tab value=\"two\" label=\"Played\" />\r\n            </Tabs>\r\n          </div>\r\n\r\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            {selectedTab === \"one\" ? (\r\n              <List>\r\n                {user.createdQuizzes.length > 0 ? (\r\n                  user.createdQuizzes.map((quiz) => (\r\n                    <ListItem\r\n                      style={{\r\n                        display: \"flex\",\r\n                        backgroundColor: \"white\",\r\n                        width: \"320px\",\r\n                        borderRadius: \"10px\",\r\n                        position: \"relative\",\r\n                        marginBottom: \"10px\"\r\n                      }}\r\n                    >\r\n                      <Link style={{color: 'black', textDecoration: 'none'}} to={`/quizDashboard/mode/${quiz._id}`}>\r\n                        <Typography variant=\"body1\">{quiz.name}</Typography>\r\n                      </Link>\r\n                      <Button style={{ position: \"absolute\", right: \"0px\" }}>\r\n                        <Delete />\r\n                      </Button>\r\n                    </ListItem>\r\n                  ))\r\n                ) : (\r\n                  <Typography>\r\n                    Hmm... Looks like you haven't created any quizzes yet\r\n                  </Typography>\r\n                )}\r\n                <Link to=\"/createQuiz\" className=\"navbar-links\">\r\n                  <Button style={{ width: \"320px\", marginTop: \"10px\" }}>\r\n                    Create more quizzes\r\n                  </Button>\r\n                </Link>\r\n              </List>\r\n            ) : (\r\n              <List>\r\n                {user.playedQuizzes.length > 0 ? (\r\n                  user.playedQuizzes.map((quiz) => (\r\n                    <ListItem\r\n                      style={{\r\n                        backgroundColor: \"white\",\r\n                        width: \"320px\",\r\n                        borderRadius: \"10px\",\r\n                        textAlign: \"center\",\r\n                        marginBottom: \"10px\"\r\n                      }}\r\n                    >\r\n                      <Typography variant=\"body1\">\r\n                        {quiz.name} - {quiz.rightAmount} point\r\n                      </Typography>\r\n                    </ListItem>\r\n                  ))\r\n                ) : (\r\n                  <Typography>\r\n                    Hmm... Looks like you haven't played any quizzes yet\r\n                  </Typography>\r\n                )}\r\n              </List>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport QuizDashBoard from \"./quizDashBoard\";\nimport Quiz from \"./Quiz\";\nimport MainPage from \"./MainPage\";\nimport createQuiz from \"./createQuiz\";\nimport Result from \"./Result\";\nimport Navbar from \"./Navbar\";\nimport Scores from \"./Scores\";\nimport MultipleAnswer from \"./MultipleAnswer\";\nimport Mode from \"./Mode\";\nimport CreateUser from \"./CreateUser\";\nimport QuizResults from \"./QuizResults\";\nimport Login from \"./Login\";\nimport User from \"./User\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <div>\n            <Navbar />\n            <Route\n              exact\n              path=\"/quizDashBoard/write/:id/result\"\n              component={QuizResults}\n            />\n            <Route exact path=\"/quizDashBoard/scores/:id\" component={Scores} />\n            <Route exact path=\"/\" component={MainPage} />\n            <Route exact path=\"/quizDashBoard\" component={QuizDashBoard} />\n            <Route exact path=\"/quizDashBoard/mode/:id\" component={Mode} />\n            <Route\n              exact\n              path=\"/quizDashBoard/multipleAnswer/:id\"\n              component={MultipleAnswer}\n            />\n            <Route exact path=\"/user\" component={User} />\n            <Route exact path=\"/createUser\" component={CreateUser} />\n            <Route exact path=\"/createUser/login\" component={Login} />\n            <Route exact path=\"/quizDashBoard/write/:id\" component={Quiz} />\n            <Route exact path=\"/createQuiz\" component={createQuiz} />\n            <Route exact path=\"/createQuiz/result\" component={Result} />\n          </div>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.hydrate(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}